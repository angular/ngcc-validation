# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

# Note that the browser docker image comes with Chrome and Firefox preinstalled.
# **NOTE 1**: Pin to exact images using an ID (SHA). See https://circleci.com/docs/2.0/circleci-images/#using-a-docker-image-id-to-pin-an-image-to-a-fixed-version.
#             (Using the tag in not necessary when pinning by ID, but include it anyway for documentation purposes.)
# **NOTE 2**: If you change the version of the docker images, also change the `cache_key` suffix.
var_1: &docker_image circleci/node:12.11-browsers@sha256:a799729b2e3997086313757470cc4cb70067affab9818eddeb5c9cc80150ea3c
var_2: &cache_key v2-ngcc-validation-{{ checksum "yarn.lock" }}-node-12.9
var_3: &working_directory ~/repo

# Executor Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors
executors:
  action-executor:
    docker:
      - image: *docker_image
    working_directory: *working_directory

# Command Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
commands:
  # Send a notification to the specified web-hook URL (e.g. for Slack), if this is a non-PR build.
  # On PR builds, this is a no-op.
  notify_webhook_on_fail:
    description: Notify a webhook about failure
    parameters:
      # `webhook_url_env_var` are secret env vars defined in CircleCI project settings.
      # The URLs come from https://angular-team.slack.com/apps/A0F7VRE7N-circleci.
      webhook_url_env_var:
        type: env_var_name
    steps:
      - run:
          when: on_fail
          command: >
            if [[ -z "$CIRCLE_PR_NUMBER" ]]; then
              lastCommitMsg=$(git show-branch --no-name $CIRCLE_SHA1);
              notificationJson="{\"text\":\":x: \`$CIRCLE_JOB\` job for $CIRCLE_PROJECT_REPONAME#$CIRCLE_BRANCH branch failed on build $CIRCLE_BUILD_NUM: $CIRCLE_BUILD_URL :scream:\\n  - $lastCommitMsg (${CIRCLE_SHA1:0:7})\"}";
              curl --request POST --header "Content-Type: application/json" --data "$notificationJson" ${<< parameters.webhook_url_env_var >>};
            fi

jobs:
  setup:
    executor: action-executor
    steps:
      # Checkout, download and cache dependencies
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          key: *cache_key
      - run:
          name: Install Dependencies
          command: |
            CHROMEDRIVER_VERSION_ARG="--versions.chrome 75.0.3770.90" yarn install --network-timeout 100000 --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: *cache_key
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: *working_directory
          paths:
            - ./*
  build_es5:
    executor: action-executor
    resource_class: xlarge
    parallelism: 4
    steps:
      - attach_workspace:
          at: *working_directory
      # Run tests!
      - run: yarn build --nb-shards=${CIRCLE_NODE_TOTAL} --shard=${CIRCLE_NODE_INDEX}
      - notify_webhook_on_fail:
          webhook_url_env_var: SLACK_NGCC_WEBHOOK_URL
  build_es2015:
    executor: action-executor
    resource_class: xlarge
    parallelism: 4
    steps:
      - attach_workspace:
          at: *working_directory
      # Switch `tsconfig.json` to target es2015.
      - run: node --eval "const tsCfgPath = './tsconfig.json', tsCfg = require(tsCfgPath); tsCfg.compilerOptions.target = 'es2015'; fs.writeFileSync(tsCfgPath, JSON.stringify(tsCfg))"
      # Run tests!
      - run: yarn build --nb-shards=${CIRCLE_NODE_TOTAL} --shard=${CIRCLE_NODE_INDEX}
      - notify_webhook_on_fail:
          webhook_url_env_var: SLACK_NGCC_WEBHOOK_URL

workflows:
  version: 2
  default_workflow:
    jobs:
      - setup
      - build_es5:
          requires:
            - setup
      - build_es2015:
          requires:
            - setup
