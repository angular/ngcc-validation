# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

# **NOTE 1**: Pin to exact images using an ID (SHA). See https://circleci.com/docs/2.0/circleci-images/#using-a-docker-image-id-to-pin-an-image-to-a-fixed-version.
#             (Using the tag in not necessary when pinning by ID, but include it anyway for documentation purposes.)
# **NOTE 2**: If you change the version of the docker images, also change the `cache_key` suffix.
# **NOTE 3**: The `*-browsers` docker image comes with Chrome and Firefox _dependencies_ preinstalled, but NOT the browsers themselves.
#             See https://circleci.com/developer/images/image/cimg/node.
# **NOTE 4**: Specify a ChromeDriver version that is compatible with the version of Chrome used.
#             See https://chromedriver.chromium.org/downloads.
var_1: &docker_image cimg/node:14.15.4-browsers@sha256:567deabc21e69837e4f1e5cfddeebb6c1b27cc606d40081753385161462f4282
var_2: &cache_key v2-ngcc-validation-{{ checksum "yarn.lock" }}-node-14.15.4
var_3: &chrome_version 88.0.4324.150
var_4: &chromedriver_version 88.0.4324.96
var_5: &working_directory ~/repo

# Executor Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-executors
executors:
  action-executor:
    docker:
      - image: *docker_image
    working_directory: *working_directory

orbs:
  browser-tools: circleci/browser-tools@1.1.2

# Command Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
commands:
  install_chrome:
    description: Install the Chrome browser
    steps:
      - browser-tools/install-chrome:
          chrome-version: *chrome_version

  # Send a notification to the specified web-hook URL (e.g. for Slack), if this is a non-PR build.
  # On PR builds, this is a no-op.
  notify_webhook_on_fail:
    description: Notify a webhook about failure
    parameters:
      # `webhook_url_env_var` are secret env vars defined in CircleCI project settings.
      # The URLs come from https://angular-team.slack.com/apps/A0F7VRE7N-circleci.
      webhook_url_env_var:
        type: env_var_name
    steps:
      - run:
          when: on_fail
          command: >
            if [[ -z "$CIRCLE_PR_NUMBER" ]]; then
              lastCommitMsg=$(git show-branch --no-name $CIRCLE_SHA1);
              notificationJson="{\"text\":\":x: \`$CIRCLE_JOB\` job for $CIRCLE_PROJECT_REPONAME#$CIRCLE_BRANCH branch failed on build $CIRCLE_BUILD_NUM: $CIRCLE_BUILD_URL :scream:\\n  - $lastCommitMsg (${CIRCLE_SHA1:0:7})\"}";
              curl --request POST --header "Content-Type: application/json" --data "$notificationJson" ${<< parameters.webhook_url_env_var >>};
            fi

jobs:
  setup:
    executor: action-executor
    environment:
      CHROMEDRIVER_VERSION: *chromedriver_version
    steps:
      - run:
          name: Log node/npm/yarn versions
          command: |
            echo "node : $(node --version)"
            echo "npm  : v$(npm --version)"
            echo "yarn : v$(yarn --version)"
      # Checkout, download and cache dependencies
      - checkout
      - restore_cache:
          name: Restore Yarn Package Cache
          key: *cache_key
      - run:
          name: Install Dependencies
          command: |
            CHROMEDRIVER_VERSION_ARG="--versions.chrome $CHROMEDRIVER_VERSION" yarn install --network-timeout 100000 --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: *cache_key
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: *working_directory
          paths:
            - ./*
  run_ngcc_via_cli:
    parameters:
      target:
        description: The ECMAScript target version for the TS compiler.
        type: enum
        enum: ["es5", "es2015"]
    executor: action-executor
    resource_class: xlarge
    parallelism: 4
    steps:
      - install_chrome
      - attach_workspace:
          at: *working_directory
      # Switch `tsconfig.base.json` to the specified target.
      - run: node --eval "const tsCfgPath = './tsconfig.base.json', tsCfg = require(tsCfgPath); tsCfg.compilerOptions.target = '<< parameters.target >>'; fs.writeFileSync(tsCfgPath, JSON.stringify(tsCfg))"
      # Run tests!
      - run: yarn build --target=<< parameters.target >> --nb-shards=${CIRCLE_NODE_TOTAL} --shard=${CIRCLE_NODE_INDEX}
      - notify_webhook_on_fail:
          webhook_url_env_var: SLACK_NGCC_WEBHOOK_URL
  run_ngcc_standalone:
    parameters:
      properties:
        description: The value to use for the ngcc `--properties` argument.
        type: string
    executor: action-executor
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: *working_directory
      # Run tests!
      - run: mv ngcc.config.standalone.js ngcc.config.js
      - run: yarn ngcc --create-ivy-entry-points --error-on-failed-entry-point --first-only --properties << parameters.properties >> --no-tsconfig
      - notify_webhook_on_fail:
          webhook_url_env_var: SLACK_NGCC_WEBHOOK_URL

workflows:
  version: 2
  default_workflow:
    jobs:
      - setup
      - run_ngcc_via_cli:
          name: cli_es5
          target: es5
          requires:
            - setup
      - run_ngcc_via_cli:
          name: cli_es2015
          target: es2015
          requires:
            - setup
      - run_ngcc_standalone:
          name: ngcc_main
          properties: main module
          requires:
            - setup
      - run_ngcc_standalone:
          name: ngcc_es5
          properties: browser module main
          requires:
            - setup
      - run_ngcc_standalone:
          name: ngcc_es2015
          properties: es2015 browser module main
          requires:
            - setup
